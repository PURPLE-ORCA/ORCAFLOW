generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email     String   @unique
  name      String?
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  assignedTasks Task[] @relation("TaskAssignee")

  @@map("profiles")
}

model Project {
  id          String    @id @default(cuid())
  title       String
  description String?
  createdBy   String    @db.Uuid
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  meetings    Meeting[]
  notes       Note[]
  tasks       Task[]

  @@map("projects")
}

model Task {
  id          String   @id @default(cuid())
  title       String
  description String?
  status      String   @default("TODO")
  dueDate     DateTime?
  labels      String[]
  projectId   String
  assigneeId  String?  @db.Uuid  // Optional assignee for MVP - can be null
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  assignee    User?    @relation("TaskAssignee", fields: [assigneeId], references: [id])

  @@map("tasks")
}

model Note {
  id        String   @id @default(cuid())
  title     String
  content   String
  projectId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("notes")
}

model Meeting {
  id             String               @id @default(cuid())
  title          String
  description    String?
  scheduledAt    DateTime
  duration       Int?
  whiteboardData String?
  projectId      String
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
  participants   MeetingParticipant[]
  project        Project              @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("meetings")
}


model MeetingParticipant {
  id        String      @id @default(cuid())
  userId    String      @db.Uuid
  meetingId String
  role      MeetingRole @default(PARTICIPANT)
  joinedAt  DateTime    @default(now())
  meeting   Meeting     @relation(fields: [meetingId], references: [id], onDelete: Cascade)

  @@unique([userId, meetingId])
  @@map("meeting_participants")
}


enum MeetingRole {
  ORGANIZER
  PARTICIPANT
  OBSERVER
}
